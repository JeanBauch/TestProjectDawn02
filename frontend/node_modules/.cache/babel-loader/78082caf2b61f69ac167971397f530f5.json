{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projetos\\\\Aplica\\xE7\\xE3oWeb (v2)\\\\TestProjectDawn02\\\\frontend\\\\src\\\\pages\\\\NewProjectImage\\\\Final\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Container, Content } from '../uploadStyles';\nimport { uniqueId } from 'lodash';\nimport filesize from 'filesize';\nimport Upload from '../Upload';\nimport FileList from '../FileList';\nimport api from '../../../services/api'; //import { MdUpdate } from 'react-icons/md';\n\nclass Final extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      uploadedFiles: []\n    };\n\n    this.handleUpload = files => {\n      const uploadedFiles = files.map(file => ({\n        file,\n        id: uniqueId(),\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: URL.createObjectURL(file),\n        progress: 0,\n        uploaded: true,\n        error: false,\n        url: null\n      }));\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\n      });\n      uploadedFiles.forEach(this.processUpload);\n    };\n\n    this.updateFile = (id, data) => {\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.map(uploadedFiles => {\n          return id === uploadedFiles.id ? { ...uploadedFiles,\n            ...data\n          } : uploadedFiles;\n        })\n      });\n    };\n\n    this.processUpload = uploadedFiles => {\n      const data = new FormData();\n      data.append('file', uploadedFiles.file, uploadedFiles.name);\n      api.post('/projects/img', data, {\n        onUploadProgress: e => {\n          const progress = parseInt(Math.round(e.loaded * 100 / e.total));\n          this.updateFile(uploadedFiles.id, {\n            progress\n          });\n        }\n      }).then(response => {\n        this.updateFile(uploadedFiles.id, {\n          uploaded: true,\n          id: response.data.id,\n          url: response.data.url\n        });\n      }).catch(() => {\n        this.updateFile(uploadedFiles.id, {\n          error: true,\n          uploaded: false\n        });\n      });\n    };\n  }\n\n  render() {\n    const {\n      uploadedFiles\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Upload, {\n      onUpload: this.handleUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    }), !!uploadedFiles.length && /*#__PURE__*/React.createElement(FileList, {\n      files: uploadedFiles,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, \"Finalizar\"));\n  }\n\n}\n\nexport default Final;","map":{"version":3,"sources":["E:/Projetos/AplicaçãoWeb (v2)/TestProjectDawn02/frontend/src/pages/NewProjectImage/Final/index.js"],"names":["React","Component","Container","Content","uniqueId","filesize","Upload","FileList","api","Final","state","uploadedFiles","handleUpload","files","map","file","id","name","readableSize","size","preview","URL","createObjectURL","progress","uploaded","error","url","setState","concat","forEach","processUpload","updateFile","data","FormData","append","post","onUploadProgress","e","parseInt","Math","round","loaded","total","then","response","catch","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container ,Content } from '../uploadStyles';\r\nimport { uniqueId } from 'lodash';\r\nimport filesize from 'filesize';\r\nimport Upload from '../Upload'\r\nimport FileList from '../FileList'\r\n\r\nimport api from '../../../services/api'\r\n//import { MdUpdate } from 'react-icons/md';\r\n\r\nclass Final extends Component {\r\n\r\n    state = {\r\n        uploadedFiles: [],\r\n    };\r\n\r\n    handleUpload = files => {\r\n        const uploadedFiles = files.map(file =>({\r\n            file,\r\n            id: uniqueId(),\r\n            name: file.name,\r\n            readableSize: filesize(file.size),\r\n            preview: URL.createObjectURL(file),\r\n            progress: 0,\r\n            uploaded: true,\r\n            error: false,\r\n            url: null,\r\n        }));\r\n        \r\n        this.setState ({\r\n            uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\r\n        });\r\n\r\n        uploadedFiles.forEach(this.processUpload);\r\n    };\r\n\r\n    updateFile = (id, data) => {\r\n        this.setState({ \r\n            uploadedFiles: this.state.uploadedFiles.map(uploadedFiles => {\r\n            return id === uploadedFiles.id \r\n                ? { ...uploadedFiles, ...data } \r\n                : uploadedFiles;\r\n            }) \r\n        });\r\n    };\r\n\r\n    processUpload = uploadedFiles => {\r\n        const data = new FormData();\r\n\r\n        data.append('file', uploadedFiles.file, uploadedFiles.name);\r\n\r\n        api.post('/projects/img', data, {\r\n            onUploadProgress: e => {\r\n                const progress = parseInt(Math.round((e.loaded*100) / e.total));\r\n\r\n                this.updateFile(uploadedFiles.id, {\r\n                    progress,\r\n                });\r\n            }\r\n        }).then(response => {\r\n            this.updateFile(uploadedFiles.id, {\r\n                uploaded: true,\r\n                id: response.data.id,\r\n                url: response.data.url\r\n            });\r\n        }).catch(() => {\r\n            this.updateFile(uploadedFiles.id, {\r\n                error: true,\r\n                uploaded: false\r\n            });\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { uploadedFiles } = this.state;\r\n        return (\r\n            <Container>\r\n                <Content>\r\n                    <Upload onUpload={this.handleUpload}/>\r\n                    { !!uploadedFiles.length && <FileList files={uploadedFiles} />}\r\n                </Content>\r\n                <button className=\"button\" type=\"submit\" >Finalizar</button>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Final;"]},"metadata":{},"sourceType":"module"}