{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projetos\\\\Aplica\\xE7\\xE3oWeb (v2)\\\\TestProjectDawn02\\\\frontend\\\\src\\\\pages\\\\NewProjectImage\\\\Final\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Container, Content } from '../uploadStyles';\nimport { uniqueId } from 'lodash';\nimport filesize from 'filesize';\nimport Upload from '../Upload';\nimport FileList from '../FileList';\nimport api from '../../../services/api'; //import fileSize from 'filesize';\n//import { MdUpdate } from 'react-icons/md';\n\nlet uploaded = false;\n\nclass Final extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      uploadedFiles: []\n    };\n\n    this.handleUpload = files => {\n      const uploadedFiles = files.map(file => ({\n        file,\n        id: uniqueId(),\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: URL.createObjectURL(file),\n        progress: 0,\n        uploaded: false,\n        error: false,\n        url: null\n      }));\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\n      });\n      uploadedFiles.forEach(this.processUpload);\n    };\n\n    this.updateFile = (id, data) => {\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.map(uploadedFiles => {\n          return id === uploadedFiles.id ? { ...uploadedFiles,\n            ...data\n          } : uploadedFiles;\n        })\n      });\n    };\n\n    this.processUpload = uploadedFiles => {\n      const data = new FormData();\n      const projectID = localStorage.getItem('ProjectID');\n      data.append('file', uploadedFiles.file, uploadedFiles.name);\n      api.post('/projects/img', data, {\n        onUploadProgress: e => {\n          const progress = parseInt(Math.round(e.loaded * 100 / e.total));\n          this.updateFile(uploadedFiles.id, {\n            progress\n          });\n        },\n        headers: {\n          ProjectID: projectID\n        }\n      }).then(async response => {\n        this.updateFile(uploadedFiles.id, {\n          uploaded: true,\n          id: response.data.key,\n          url: response.data.url\n        });\n        const urlimg = response.data.url;\n\n        if (!uploaded) {\n          await api.post(`/projects/${projectID}`, null, {\n            headers: {\n              urlimg\n            }\n          });\n          uploaded = true;\n        }\n      }).catch(() => {\n        this.updateFile(uploadedFiles.id, {\n          error: true\n        });\n      });\n    };\n\n    this.handleDelete = async id => {\n      await api.delete(`/projects/img/${id}`);\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.filter(file => file.id !== id)\n      });\n    };\n  }\n\n  componentWillUnmount() {\n    this.state.uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\n    uploaded = false;\n  }\n\n  render() {\n    const {\n      uploadedFiles\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Upload, {\n      onUpload: this.handleUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }), !!uploadedFiles.length && /*#__PURE__*/React.createElement(FileList, {\n      files: uploadedFiles,\n      onDelete: this.handleDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 25\n      }\n    })));\n  }\n\n}\n\nexport default Final;","map":{"version":3,"sources":["E:/Projetos/AplicaçãoWeb (v2)/TestProjectDawn02/frontend/src/pages/NewProjectImage/Final/index.js"],"names":["React","Component","Container","Content","uniqueId","filesize","Upload","FileList","api","uploaded","Final","state","uploadedFiles","handleUpload","files","map","file","id","name","readableSize","size","preview","URL","createObjectURL","progress","error","url","setState","concat","forEach","processUpload","updateFile","data","FormData","projectID","localStorage","getItem","append","post","onUploadProgress","e","parseInt","Math","round","loaded","total","headers","ProjectID","then","response","key","urlimg","catch","handleDelete","delete","filter","componentWillUnmount","revokeObjectURL","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container ,Content } from '../uploadStyles';\r\nimport { uniqueId } from 'lodash';\r\nimport filesize from 'filesize';\r\nimport Upload from '../Upload'\r\nimport FileList from '../FileList'\r\n\r\nimport api from '../../../services/api'\r\n//import fileSize from 'filesize';\r\n//import { MdUpdate } from 'react-icons/md';\r\n\r\nlet uploaded = false;\r\n\r\nclass Final extends Component {\r\n\r\n    state = {\r\n        uploadedFiles: [],\r\n    };\r\n\r\n    /*\r\n    async componentDidMount() {\r\n        const response = await api.get('/projects/img');\r\n\r\n        this.setState({\r\n            uploadedFiles: response.data.map(file => ({\r\n                id: file.key,\r\n                name: file.name,\r\n                readableSize: fileSize(file.size),\r\n                preview: file.url,\r\n                uploaded: true,\r\n                url: file.url,\r\n            }))\r\n        })\r\n    }*/\r\n\r\n    handleUpload = files => {\r\n        \r\n        const uploadedFiles = files.map(file =>({\r\n            file,\r\n            id: uniqueId(),\r\n            name: file.name,\r\n            readableSize: filesize(file.size),\r\n            preview: URL.createObjectURL(file),\r\n            progress: 0,\r\n            uploaded: false,\r\n            error: false,\r\n            url: null,\r\n        }));\r\n        \r\n        this.setState ({\r\n            uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\r\n        });\r\n\r\n        uploadedFiles.forEach(this.processUpload);\r\n    };\r\n\r\n    updateFile = (id, data) => {\r\n        this.setState({ \r\n            uploadedFiles: this.state.uploadedFiles.map(uploadedFiles => {\r\n            return id === uploadedFiles.id \r\n                ? { ...uploadedFiles, ...data } \r\n                : uploadedFiles;\r\n            }) \r\n        });\r\n    };\r\n\r\n    processUpload = uploadedFiles => {\r\n        const data = new FormData();\r\n        const projectID = localStorage.getItem('ProjectID');\r\n\r\n        data.append('file', uploadedFiles.file, uploadedFiles.name);\r\n\r\n        api.post('/projects/img', data, {\r\n            onUploadProgress: e => {\r\n                const progress = parseInt(Math.round((e.loaded*100) / e.total));\r\n\r\n                this.updateFile(uploadedFiles.id, {\r\n                    progress,\r\n                });\r\n            },\r\n            headers: {\r\n                ProjectID: projectID,\r\n            },\r\n\r\n        }).then(async response => {\r\n            this.updateFile(uploadedFiles.id, {\r\n                uploaded: true,\r\n                id: response.data.key,\r\n                url: response.data.url,\r\n            });\r\n            const urlimg = response.data.url;\r\n\r\n            if(!uploaded) {\r\n                await api.post(`/projects/${projectID}`, null, {\r\n                    headers: {\r\n                        urlimg,\r\n                    },\r\n                });\r\n                uploaded = true;\r\n            }\r\n        }).catch(() => {\r\n            this.updateFile(uploadedFiles.id, {\r\n                error: true,\r\n            });\r\n        });\r\n    };\r\n\r\n    handleDelete = async id => {\r\n        await api.delete(`/projects/img/${id}`);\r\n\r\n        this.setState({\r\n            uploadedFiles: this.state.uploadedFiles.filter(file => file.id !== id),\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.state.uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\r\n        uploaded = false;\r\n    }\r\n\r\n    render() {\r\n        const { uploadedFiles } = this.state;\r\n        return (\r\n            <Container>\r\n                <Content>\r\n                    <Upload onUpload={this.handleUpload}/>\r\n                    { !!uploadedFiles.length && ( \r\n                        <FileList files={uploadedFiles} onDelete={this.handleDelete}/> \r\n                    )}\r\n                </Content>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Final;"]},"metadata":{},"sourceType":"module"}