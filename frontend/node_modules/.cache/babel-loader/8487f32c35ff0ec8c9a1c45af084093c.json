{"ast":null,"code":"var _jsxFileName = \"E:\\\\Projetos\\\\Aplica\\xE7\\xE3oWeb (v2)\\\\TestProjectDawn02\\\\frontend\\\\src\\\\pages\\\\NewProjectImage\\\\Final\\\\index.js\";\nimport React, { Component } from 'react';\nimport { Container, Content } from '../uploadStyles';\nimport { uniqueId } from 'lodash';\nimport filesize from 'filesize';\nimport Upload from '../Upload';\nimport FileList from '../FileList';\nimport api from '../../../services/api';\nimport fileSize from 'filesize'; //import { MdUpdate } from 'react-icons/md';\n\nclass Final extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      uploadedFiles: []\n    };\n\n    this.handleUpload = files => {\n      const uploadedFiles = files.map(file => ({\n        file,\n        id: uniqueId(),\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: URL.createObjectURL(file),\n        progress: 0,\n        uploaded: false,\n        error: false,\n        url: null\n      }));\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\n      });\n      uploadedFiles.forEach(this.processUpload);\n    };\n\n    this.updateFile = (id, data) => {\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.map(uploadedFiles => {\n          return id === uploadedFiles.id ? { ...uploadedFiles,\n            ...data\n          } : uploadedFiles;\n        })\n      });\n    };\n\n    this.processUpload = uploadedFiles => {\n      const data = new FormData();\n      const projectID = localStorage.getItem('ProjectID');\n      data.append('file', uploadedFiles.file, uploadedFiles.name);\n      api.post('/projects/img', data, {\n        onUploadProgress: e => {\n          const progress = parseInt(Math.round(e.loaded * 100 / e.total));\n          this.updateFile(uploadedFiles.id, {\n            progress\n          });\n        },\n        headers: {\n          ProjectID: projectID\n        }\n      }).then(async response => {\n        this.updateFile(uploadedFiles.id, {\n          uploaded: true,\n          id: response.data.key,\n          url: response.data.url\n        });\n        /*const url = new FormData();\r\n        url.append('url',response.data.url);\r\n        url.append('id', projectID);\r\n        await api.put('/projects/new',url);*/\n      }).catch(() => {\n        this.updateFile(uploadedFiles.id, {\n          error: true\n        });\n      });\n    };\n\n    this.handleDelete = async id => {\n      await api.delete(`/projects/img/${id}`);\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.filter(file => file.id !== id)\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const response = await api.get('/projects/img');\n    this.setState({\n      uploadedFiles: response.data.map(file => ({\n        id: file.key,\n        name: file.name,\n        readableSize: fileSize(file.size),\n        preview: file.url,\n        uploaded: true,\n        url: file.url\n      }))\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\n  }\n\n  render() {\n    const {\n      uploadedFiles\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Upload, {\n      onUpload: this.handleUpload,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }), !!uploadedFiles.length && /*#__PURE__*/React.createElement(FileList, {\n      files: uploadedFiles,\n      onDelete: this.handleDelete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    })));\n  }\n\n}\n\nexport default Final;","map":{"version":3,"sources":["E:/Projetos/AplicaçãoWeb (v2)/TestProjectDawn02/frontend/src/pages/NewProjectImage/Final/index.js"],"names":["React","Component","Container","Content","uniqueId","filesize","Upload","FileList","api","fileSize","Final","state","uploadedFiles","handleUpload","files","map","file","id","name","readableSize","size","preview","URL","createObjectURL","progress","uploaded","error","url","setState","concat","forEach","processUpload","updateFile","data","FormData","projectID","localStorage","getItem","append","post","onUploadProgress","e","parseInt","Math","round","loaded","total","headers","ProjectID","then","response","key","catch","handleDelete","delete","filter","componentDidMount","get","componentWillUnmount","revokeObjectURL","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container ,Content } from '../uploadStyles';\r\nimport { uniqueId } from 'lodash';\r\nimport filesize from 'filesize';\r\nimport Upload from '../Upload'\r\nimport FileList from '../FileList'\r\n\r\nimport api from '../../../services/api'\r\nimport fileSize from 'filesize';\r\n//import { MdUpdate } from 'react-icons/md';\r\n\r\nclass Final extends Component {\r\n\r\n    state = {\r\n        uploadedFiles: [],\r\n    };\r\n\r\n    async componentDidMount() {\r\n        const response = await api.get('/projects/img');\r\n\r\n        this.setState({\r\n            uploadedFiles: response.data.map(file => ({\r\n                id: file.key,\r\n                name: file.name,\r\n                readableSize: fileSize(file.size),\r\n                preview: file.url,\r\n                uploaded: true,\r\n                url: file.url,\r\n            }))\r\n        })\r\n    }\r\n\r\n    handleUpload = files => {\r\n        \r\n        const uploadedFiles = files.map(file =>({\r\n            file,\r\n            id: uniqueId(),\r\n            name: file.name,\r\n            readableSize: filesize(file.size),\r\n            preview: URL.createObjectURL(file),\r\n            progress: 0,\r\n            uploaded: false,\r\n            error: false,\r\n            url: null,\r\n        }));\r\n        \r\n        this.setState ({\r\n            uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\r\n        });\r\n\r\n        uploadedFiles.forEach(this.processUpload);\r\n    };\r\n\r\n    updateFile = (id, data) => {\r\n        this.setState({ \r\n            uploadedFiles: this.state.uploadedFiles.map(uploadedFiles => {\r\n            return id === uploadedFiles.id \r\n                ? { ...uploadedFiles, ...data } \r\n                : uploadedFiles;\r\n            }) \r\n        });\r\n    };\r\n\r\n    processUpload = uploadedFiles => {\r\n        const data = new FormData();\r\n        const projectID = localStorage.getItem('ProjectID');\r\n\r\n        data.append('file', uploadedFiles.file, uploadedFiles.name);\r\n\r\n        api.post('/projects/img', data, {\r\n            onUploadProgress: e => {\r\n                const progress = parseInt(Math.round((e.loaded*100) / e.total));\r\n\r\n                this.updateFile(uploadedFiles.id, {\r\n                    progress,\r\n                });\r\n            },\r\n            headers: {\r\n                ProjectID: projectID,\r\n            },\r\n\r\n        }).then(async response => {\r\n            this.updateFile(uploadedFiles.id, {\r\n                uploaded: true,\r\n                id: response.data.key,\r\n                url: response.data.url,\r\n            });\r\n\r\n            /*const url = new FormData();\r\n            url.append('url',response.data.url);\r\n            url.append('id', projectID);\r\n            await api.put('/projects/new',url);*/\r\n\r\n        }).catch(() => {\r\n            this.updateFile(uploadedFiles.id, {\r\n                error: true,\r\n            });\r\n        });\r\n    };\r\n\r\n    handleDelete = async id => {\r\n        await api.delete(`/projects/img/${id}`);\r\n\r\n        this.setState({\r\n            uploadedFiles: this.state.uploadedFiles.filter(file => file.id !== id),\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.state.uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\r\n    }\r\n\r\n    render() {\r\n        const { uploadedFiles } = this.state;\r\n\r\n        return (\r\n            <Container>\r\n                <Content>\r\n                    <Upload onUpload={this.handleUpload}/>\r\n                    { !!uploadedFiles.length && ( \r\n                        <FileList files={uploadedFiles} onDelete={this.handleDelete}/> \r\n                    )}\r\n                </Content>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Final;"]},"metadata":{},"sourceType":"module"}