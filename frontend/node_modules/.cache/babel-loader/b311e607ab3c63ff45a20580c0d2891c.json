{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _regeneratorRuntime from '@babel/runtime/regenerator';\nimport _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';\nimport _inherits from '@babel/runtime/helpers/inherits';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { createElement, Fragment, PureComponent } from 'react';\nimport Dropzone from 'react-dropzone';\nimport Chip from '@material-ui/core/Chip';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nfunction isImage(file) {\n  if (file.type.split('/')[0] === 'image') {\n    return true;\n  }\n}\n\nfunction convertBytesToMbsOrKbs(filesize) {\n  var size = ''; // I know, not technically correct...\n\n  if (filesize >= 1000000) {\n    size = filesize / 1000000 + ' megabytes';\n  } else if (filesize >= 1000) {\n    size = filesize / 1000 + ' kilobytes';\n  } else {\n    size = filesize + ' bytes';\n  }\n\n  return size;\n}\n\nfunction createFileFromUrl(_x) {\n  return _createFileFromUrl.apply(this, arguments);\n}\n\nfunction _createFileFromUrl() {\n  _createFileFromUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var response, data, metadata, filename, ext, fullFilename;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.blob();\n\n          case 5:\n            data = _context.sent;\n            metadata = {\n              type: data.type\n            };\n            filename = url.replace(/\\?.+/, '').split('/').pop();\n            ext = data.type.split('/').pop(); // Append extension only if not already present\n\n            fullFilename = !(filename === null || filename === void 0 ? void 0 : filename.endsWith(ext)) ? \"\".concat(filename, \".\").concat(ext) : filename;\n            return _context.abrupt(\"return\", new File([data], fullFilename, metadata));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createFileFromUrl.apply(this, arguments);\n}\n\nfunction readFile(file) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onload = function (event) {\n      var _event$target;\n\n      resolve(event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result);\n    };\n\n    reader.onerror = function (event) {\n      reader.abort();\n      reject(event);\n    };\n\n    reader.readAsDataURL(file);\n  });\n}\n\nvar styles = {\n  removeBtn: {\n    transition: '.5s ease',\n    position: 'absolute',\n    opacity: 0,\n    top: -5,\n    right: -5,\n    width: 40,\n    height: 40\n  },\n  smallPreviewImg: {\n    height: 100,\n    width: 'initial',\n    maxWidth: '100%',\n    marginTop: 5,\n    marginRight: 10,\n    color: 'rgba(0, 0, 0, 0.87)',\n    transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n    boxSizing: 'border-box',\n    boxShadow: 'rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px',\n    borderRadius: 2,\n    zIndex: 5,\n    opacity: 1\n  },\n  imageContainer: {\n    position: 'relative',\n    zIndex: 10,\n    textAlign: 'center',\n    '&:hover $smallPreviewImg': {\n      opacity: 0.3\n    },\n    '&:hover $removeBtn': {\n      opacity: 1\n    }\n  }\n};\n\nvar _ref2 = /*#__PURE__*/createElement(DeleteIcon, null);\n\nfunction PreviewList(_ref) {\n  var fileObjects = _ref.fileObjects,\n      handleRemove = _ref.handleRemove,\n      showFileNames = _ref.showFileNames,\n      useChipsForPreview = _ref.useChipsForPreview,\n      previewChipProps = _ref.previewChipProps,\n      previewGridClasses = _ref.previewGridClasses,\n      previewGridProps = _ref.previewGridProps,\n      classes = _ref.classes;\n\n  if (useChipsForPreview) {\n    return fileObjects.map(function (fileObject, i) {\n      return createElement(\"div\", {\n        key: i\n      }, createElement(Chip, _extends({\n        label: fileObject.file.name,\n        onDelete: handleRemove(i),\n        variant: \"outlined\"\n      }, previewChipProps)));\n    });\n  }\n\n  return createElement(Grid, _extends({\n    container: true,\n    spacing: 8,\n    className: previewGridClasses.container\n  }, previewGridProps.container), fileObjects.map(function (fileObject, i) {\n    var img = isImage(fileObject.file) ? createElement(\"img\", {\n      className: classes.smallPreviewImg,\n      role: \"presentation\",\n      src: fileObject.data\n    }) : createElement(AttachFileIcon, {\n      className: classes.smallPreviewImg\n    });\n    return createElement(Grid, _extends({\n      key: i,\n      item: true,\n      xs: 4\n    }, previewGridProps.item, {\n      className: clsx(previewGridClasses.item, classes.imageContainer)\n    }), img, showFileNames && createElement(Typography, {\n      variant: \"body1\",\n      component: \"p\"\n    }, fileObject.file.name), createElement(Fab, {\n      onClick: handleRemove(i),\n      \"aria-label\": \"Delete\",\n      className: classes.removeBtn\n    }, _ref2));\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? PreviewList.propTypes = {\n  classes: PropTypes.object.isRequired,\n  fileObjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleRemove: PropTypes.func.isRequired,\n  previewChipProps: PropTypes.object,\n  previewGridClasses: PropTypes.object,\n  previewGridProps: PropTypes.object,\n  showFileNames: PropTypes.bool,\n  useChipsForPreview: PropTypes.bool\n} : void 0;\nvar PreviewList$1 = withStyles(styles)(PreviewList);\nvar variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\n\nvar styles$1 = function styles(theme) {\n  return {\n    success: {\n      backgroundColor: green[600]\n    },\n    error: {\n      backgroundColor: theme.palette.error.dark\n    },\n    info: {\n      backgroundColor: theme.palette.primary.dark\n    },\n    warning: {\n      backgroundColor: amber[700]\n    },\n    icon: {\n      fontSize: 20\n    },\n    iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing(1)\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n};\n\nfunction SnackbarContentWrapper(props) {\n  var classes = props.classes,\n      className = props.className,\n      message = props.message,\n      onClose = props.onClose,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"message\", \"onClose\", \"variant\"]);\n\n  var Icon = variantIcon[variant];\n  return createElement(SnackbarContent, _extends({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message\n    }, createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant)\n    }), message),\n    action: [createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"Close\",\n      color: \"inherit\",\n      className: classes.close,\n      onClick: onClose\n    }, createElement(CloseIcon, {\n      className: classes.icon\n    }))]\n  }, other));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? SnackbarContentWrapper.propTypes = {\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  message: PropTypes.node,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired\n} : void 0;\nvar SnackbarContentWrapper$1 = withStyles(styles$1)(SnackbarContentWrapper);\nvar styles$2 = {\n  '@keyframes progress': {\n    '0%': {\n      backgroundPosition: '0 0'\n    },\n    '100%': {\n      backgroundPosition: '-70px 0'\n    }\n  },\n  dropZone: {\n    position: 'relative',\n    width: '100%',\n    minHeight: '250px',\n    backgroundColor: '#F0F0F0',\n    border: 'dashed',\n    borderColor: '#C8C8C8',\n    cursor: 'pointer',\n    boxSizing: 'border-box'\n  },\n  stripes: {\n    border: 'solid',\n    backgroundImage: 'repeating-linear-gradient(-45deg, #F0F0F0, #F0F0F0 25px, #C8C8C8 25px, #C8C8C8 50px)',\n    animation: 'progress 2s linear infinite !important',\n    backgroundSize: '150% 100%'\n  },\n  rejectStripes: {\n    backgroundImage: 'repeating-linear-gradient(-45deg, #fc8785, #fc8785 25px, #f4231f 25px, #f4231f 50px)'\n  },\n  dropzoneTextStyle: {\n    textAlign: 'center'\n  },\n  uploadIconSize: {\n    width: 51,\n    height: 51,\n    color: '#909090'\n  },\n  dropzoneParagraph: {\n    marginBottom: 20,\n    marginTop: 20\n  }\n};\nvar defaultSnackbarAnchorOrigin = {\n  horizontal: 'left',\n  vertical: 'bottom'\n};\n/**\n * This components creates a Material-UI Dropzone, with previews and snackbar notifications.\n */\n\nvar DropzoneArea = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneArea, _React$PureComponent);\n\n  function DropzoneArea() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneArea);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneArea)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileObjects: [],\n      openSnackBar: false,\n      snackbarMessage: '',\n      snackbarVariant: 'success'\n    };\n\n    _this.filesArray = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(urls) {\n        var fileObjs;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return Promise.all(urls.map( /*#__PURE__*/function () {\n                  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n                    var file, data;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return createFileFromUrl(url);\n\n                          case 2:\n                            file = _context.sent;\n                            _context.next = 5;\n                            return readFile(file);\n\n                          case 5:\n                            data = _context.sent;\n                            return _context.abrupt(\"return\", {\n                              file: file,\n                              data: data\n                            });\n\n                          case 7:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref2.apply(this, arguments);\n                  };\n                }()));\n\n              case 3:\n                fileObjs = _context2.sent;\n\n                _this.setState(function (state) {\n                  return {\n                    fileObjects: [].concat(state.fileObjects, fileObjs)\n                  };\n                }, function () {\n                  var onChange = _this.props.onChange;\n                  var fileObjects = _this.state.fileObjects;\n\n                  if (onChange) {\n                    onChange(fileObjects.map(function (fileObject) {\n                      return fileObject.file;\n                    }));\n                  }\n                });\n\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.handleDropAccepted = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(acceptedFiles, evt) {\n        var _this$props, filesLimit, getFileAddedMessage, getFileLimitExceedMessage, onDrop, fileObjects, fileObjs, message;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _this$props = _this.props, filesLimit = _this$props.filesLimit, getFileAddedMessage = _this$props.getFileAddedMessage, getFileLimitExceedMessage = _this$props.getFileLimitExceedMessage, onDrop = _this$props.onDrop;\n                fileObjects = _this.state.fileObjects;\n\n                if (!(filesLimit > 1 && fileObjects.length + acceptedFiles.length > filesLimit)) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                _this.setState({\n                  openSnackBar: true,\n                  snackbarMessage: getFileLimitExceedMessage(filesLimit),\n                  snackbarVariant: 'error'\n                });\n\n                return _context4.abrupt(\"return\");\n\n              case 5:\n                // Notify Drop event\n                if (onDrop) {\n                  onDrop(acceptedFiles, evt);\n                } // Retrieve fileObjects data\n\n\n                _context4.next = 8;\n                return Promise.all(acceptedFiles.map( /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(file) {\n                    var data;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _context3.next = 2;\n                            return readFile(file);\n\n                          case 2:\n                            data = _context3.sent;\n                            return _context3.abrupt(\"return\", {\n                              file: file,\n                              data: data\n                            });\n\n                          case 4:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x5) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }()));\n\n              case 8:\n                fileObjs = _context4.sent; // Display message\n\n                message = fileObjs.reduce(function (msg, fileObj) {\n                  return msg + getFileAddedMessage(fileObj.file.name);\n                }, '');\n\n                _this.setState({\n                  openSnackBar: true,\n                  snackbarMessage: message,\n                  snackbarVariant: 'success'\n                }); // Update component state\n\n\n                _this.setState(function (state) {\n                  // Handle a single file\n                  if (filesLimit <= 1) {\n                    return {\n                      fileObjects: [].concat(fileObjs[0])\n                    };\n                  } // Handle multiple files\n\n\n                  return {\n                    fileObjects: [].concat(state.fileObjects, fileObjs)\n                  };\n                }, function () {\n                  var onChange = _this.props.onChange;\n                  var fileObjects = _this.state.fileObjects;\n\n                  if (onChange) {\n                    onChange(fileObjects.map(function (fileObject) {\n                      return fileObject.file;\n                    }));\n                  }\n                });\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    _this.handleDropRejected = function (rejectedFiles, evt) {\n      var _this$props2 = _this.props,\n          acceptedFiles = _this$props2.acceptedFiles,\n          getDropRejectMessage = _this$props2.getDropRejectMessage,\n          maxFileSize = _this$props2.maxFileSize,\n          onDropRejected = _this$props2.onDropRejected;\n      var message = '';\n      rejectedFiles.forEach(function (rejectedFile) {\n        message = getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize);\n      });\n\n      if (onDropRejected) {\n        onDropRejected(rejectedFiles, evt);\n      }\n\n      _this.setState({\n        openSnackBar: true,\n        snackbarMessage: message,\n        snackbarVariant: 'error'\n      });\n    };\n\n    _this.handleRemove = function (fileIndex) {\n      return function (event) {\n        event.stopPropagation();\n        var _this$props3 = _this.props,\n            getFileRemovedMessage = _this$props3.getFileRemovedMessage,\n            onChange = _this$props3.onChange,\n            onDelete = _this$props3.onDelete;\n        var fileObjects = _this.state.fileObjects; // Find removed fileObject\n\n        var removedFileObj = fileObjects.filter(function (fileObject, i) {\n          return i === fileIndex;\n        })[0]; // Calculate remaining fileObjects array\n\n        var remainingFileObjs = fileObjects.filter(function (fileObject, i) {\n          return i !== fileIndex;\n        });\n\n        _this.setState({\n          fileObjects: remainingFileObjs\n        }, function () {\n          if (onDelete) {\n            onDelete(removedFileObj.file);\n          }\n\n          if (onChange) {\n            onChange(_this.state.fileObjects.map(function (fileObject) {\n              return fileObject.file;\n            }));\n          }\n\n          _this.setState({\n            openSnackBar: true,\n            snackbarMessage: getFileRemovedMessage(removedFileObj.file.name),\n            snackbarVariant: 'info'\n          });\n        });\n      };\n    };\n\n    _this.handleCloseSnackbar = function () {\n      _this.setState({\n        openSnackBar: false\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneArea, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.filesArray(this.props.initialFiles);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props4 = this.props,\n          clearOnUnmount = _this$props4.clearOnUnmount,\n          onChange = _this$props4.onChange;\n\n      if (clearOnUnmount) {\n        this.setState({\n          fileObjects: []\n        });\n\n        if (onChange) {\n          onChange([]);\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props5 = this.props,\n          acceptedFiles = _this$props5.acceptedFiles,\n          alertSnackbarProps = _this$props5.alertSnackbarProps,\n          classes = _this$props5.classes,\n          disableRejectionFeedback = _this$props5.disableRejectionFeedback,\n          dropzoneClass = _this$props5.dropzoneClass,\n          dropzoneParagraphClass = _this$props5.dropzoneParagraphClass,\n          dropzoneProps = _this$props5.dropzoneProps,\n          dropzoneText = _this$props5.dropzoneText,\n          filesLimit = _this$props5.filesLimit,\n          inputProps = _this$props5.inputProps,\n          maxFileSize = _this$props5.maxFileSize,\n          previewChipProps = _this$props5.previewChipProps,\n          previewGridClasses = _this$props5.previewGridClasses,\n          previewGridProps = _this$props5.previewGridProps,\n          previewText = _this$props5.previewText,\n          showAlerts = _this$props5.showAlerts,\n          showFileNames = _this$props5.showFileNames,\n          showFileNamesInPreview = _this$props5.showFileNamesInPreview,\n          showPreviews = _this$props5.showPreviews,\n          showPreviewsInDropzone = _this$props5.showPreviewsInDropzone,\n          useChipsForPreview = _this$props5.useChipsForPreview;\n      var _this$state = this.state,\n          fileObjects = _this$state.fileObjects,\n          openSnackBar = _this$state.openSnackBar,\n          snackbarMessage = _this$state.snackbarMessage,\n          snackbarVariant = _this$state.snackbarVariant;\n      var acceptFiles = acceptedFiles === null || acceptedFiles === void 0 ? void 0 : acceptedFiles.join(',');\n      var isMultiple = filesLimit > 1;\n      var previewsVisible = showPreviews && fileObjects.length > 0;\n      var previewsInDropzoneVisible = showPreviewsInDropzone && fileObjects.length > 0;\n      return createElement(Fragment, null, createElement(Dropzone, _extends({}, dropzoneProps, {\n        accept: acceptFiles,\n        onDropAccepted: this.handleDropAccepted,\n        onDropRejected: this.handleDropRejected,\n        maxSize: maxFileSize,\n        multiple: isMultiple\n      }), function (_ref5) {\n        var getRootProps = _ref5.getRootProps,\n            getInputProps = _ref5.getInputProps,\n            isDragActive = _ref5.isDragActive,\n            isDragReject = _ref5.isDragReject;\n        return createElement(\"div\", _extends({}, getRootProps(), {\n          className: clsx(classes.dropZone, dropzoneClass, isDragActive && classes.stripes, !disableRejectionFeedback && isDragReject && classes.rejectStripes)\n        }), createElement(\"input\", _extends({}, inputProps, getInputProps())), createElement(\"div\", {\n          className: classes.dropzoneTextStyle\n        }, createElement(Typography, {\n          variant: \"h5\",\n          component: \"p\",\n          className: clsx(classes.dropzoneParagraph, dropzoneParagraphClass)\n        }, dropzoneText), createElement(CloudUploadIcon, {\n          className: classes.uploadIconSize\n        })), previewsInDropzoneVisible && createElement(PreviewList$1, {\n          fileObjects: fileObjects,\n          handleRemove: _this2.handleRemove,\n          showFileNames: showFileNames,\n          useChipsForPreview: useChipsForPreview,\n          previewChipProps: previewChipProps,\n          previewGridClasses: previewGridClasses,\n          previewGridProps: previewGridProps\n        }));\n      }), previewsVisible && createElement(Fragment, null, createElement(Typography, {\n        variant: \"subtitle1\",\n        component: \"span\"\n      }, previewText), createElement(PreviewList$1, {\n        fileObjects: fileObjects,\n        handleRemove: this.handleRemove,\n        showFileNames: showFileNamesInPreview,\n        useChipsForPreview: useChipsForPreview,\n        previewChipProps: previewChipProps,\n        previewGridClasses: previewGridClasses,\n        previewGridProps: previewGridProps\n      })), showAlerts && createElement(Snackbar, _extends({\n        anchorOrigin: defaultSnackbarAnchorOrigin,\n        autoHideDuration: 6000\n      }, alertSnackbarProps, {\n        open: openSnackBar,\n        onClose: this.handleCloseSnackbar\n      }), createElement(SnackbarContentWrapper$1, {\n        onClose: this.handleCloseSnackbar,\n        variant: snackbarVariant,\n        message: snackbarMessage\n      })));\n    }\n  }]);\n\n  return DropzoneArea;\n}(PureComponent);\n\nDropzoneArea.defaultProps = {\n  acceptedFiles: ['image/*', 'video/*', 'application/*'],\n  filesLimit: 3,\n  maxFileSize: 3000000,\n  dropzoneText: 'Drag and drop a file here or click',\n  previewText: 'Preview:',\n  disableRejectionFeedback: false,\n  showPreviews: false,\n  // By default previews show up under in the dialog and inside in the standalone\n  showPreviewsInDropzone: true,\n  showFileNames: false,\n  showFileNamesInPreview: false,\n  useChipsForPreview: false,\n  previewChipProps: {},\n  previewGridClasses: {},\n  previewGridProps: {},\n  showAlerts: true,\n  alertSnackbarProps: {\n    anchorOrigin: {\n      horizontal: 'left',\n      vertical: 'bottom'\n    },\n    autoHideDuration: 6000\n  },\n  clearOnUnmount: true,\n  initialFiles: [],\n  getFileLimitExceedMessage: function getFileLimitExceedMessage(filesLimit) {\n    return \"Maximum allowed number of files exceeded. Only \".concat(filesLimit, \" allowed\");\n  },\n  getFileAddedMessage: function getFileAddedMessage(fileName) {\n    return \"File \".concat(fileName, \" successfully added.\");\n  },\n  getFileRemovedMessage: function getFileRemovedMessage(fileName) {\n    return \"File \".concat(fileName, \" removed.\");\n  },\n  getDropRejectMessage: function getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize) {\n    var message = \"File \".concat(rejectedFile.name, \" was rejected. \");\n\n    if (!acceptedFiles.includes(rejectedFile.type)) {\n      message += 'File type not supported. ';\n    }\n\n    if (rejectedFile.size > maxFileSize) {\n      message += 'File is too big. Size limit is ' + convertBytesToMbsOrKbs(maxFileSize) + '. ';\n    }\n\n    return message;\n  }\n};\nprocess.env.NODE_ENV !== \"production\" ? DropzoneArea.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** A list of file types to accept.\n   * @see See [here](https://react-dropzone.js.org/#section-accepting-specific-file-types) for more details.\n   */\n  acceptedFiles: PropTypes.arrayOf(PropTypes.string),\n\n  /** Maximum number of files that can be loaded into the dropzone. */\n  filesLimit: PropTypes.number,\n\n  /** Maximum file size (in bytes) that the dropzone will accept. */\n  maxFileSize: PropTypes.number,\n\n  /** Text inside the dropzone. */\n  dropzoneText: PropTypes.string,\n\n  /** Custom CSS class name for dropzone container. */\n  dropzoneClass: PropTypes.string,\n\n  /** Custom CSS class name for text inside the container. */\n  dropzoneParagraphClass: PropTypes.string,\n\n  /** Disable feedback effect when dropping rejected files. */\n  disableRejectionFeedback: PropTypes.bool,\n\n  /** Shows previews **BELOW** the dropzone. */\n  showPreviews: PropTypes.bool,\n\n  /** Shows preview **INSIDE** the dropzone area. */\n  showPreviewsInDropzone: PropTypes.bool,\n\n  /** Shows file name under the dropzone image. */\n  showFileNames: PropTypes.bool,\n\n  /** Shows file name under the image. */\n  showFileNamesInPreview: PropTypes.bool,\n\n  /** Uses deletable Material-UI Chip components to display file names. */\n  useChipsForPreview: PropTypes.bool,\n\n  /**\n   * Props to pass to the Material-UI Chip components.<br/>Requires `useChipsForPreview` prop to be `true`.\n   *\n   * @see See [Material-UI Chip](https://material-ui.com/api/chip/#props) for available values.\n   */\n  previewChipProps: PropTypes.object,\n\n  /**\n   * Custom CSS classNames for preview Grid components.<br/>\n   * Should be in the form {container: string, item: string, image: string}.\n   */\n  previewGridClasses: PropTypes.object,\n\n  /**\n   * Props to pass to the Material-UI Grid components.<br/>\n   * Should be in the form {container: GridProps, item: GridProps}.\n   *\n   * @see See [Material-UI Grid](https://material-ui.com/api/grid/#props) for available GridProps values.\n   */\n  previewGridProps: PropTypes.object,\n\n  /** The label for the file preview section. */\n  previewText: PropTypes.string,\n\n  /** Shows styled Material-UI Snackbar when files are dropped, deleted or rejected. */\n  showAlerts: PropTypes.bool,\n\n  /**\n   * Props to pass to the Material-UI Snackbar components.<br/>Requires `showAlerts` prop to be `true`.\n   *\n   * @see See [Material-UI Snackbar](https://material-ui.com/api/snackbar/#props) for available values.\n   */\n  alertSnackbarProps: PropTypes.object,\n\n  /**\n   * Props to pass to the Dropzone component.\n   *\n   * @see See [Dropzone props](https://react-dropzone.js.org/#src) for available values.\n   */\n  dropzoneProps: PropTypes.object,\n\n  /**\n   * Attributes applied to the input element.\n   *\n   * @see See [MDN Input File attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Additional_attributes) for available values.\n   */\n  inputProps: PropTypes.object,\n\n  /** Clear uploaded files when component is unmounted. */\n  clearOnUnmount: PropTypes.bool,\n\n  /** List of URLs of already uploaded images.<br/>**Note:** Please take care of CORS. */\n  initialFiles: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Get alert message to display when files limit is exceed.\n   *\n   * *Default*: \"Maximum allowed number of files exceeded. Only ${filesLimit} allowed\"\n   *\n   * @param {number} filesLimit The `filesLimit` currently set for the component.\n   */\n  getFileLimitExceedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a new file is added.\n   *\n   * *Default*: \"File ${fileName} successfully added.\"\n   *\n   * @param {string} fileName The newly added file name.\n   */\n  getFileAddedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a file is removed.\n   *\n   * *Default*: \"File ${fileName} removed.\"\n   *\n   * @param {string} fileName The name of the removed file.\n   */\n  getFileRemovedMessage: PropTypes.func,\n\n  /**\n   * Get alert message to display when a file is rejected onDrop.\n   *\n   * *Default*: \"File ${rejectedFile.name} was rejected.\"\n   *\n   * @param {Object} rejectedFile The file that got rejected\n   * @param {string[]} acceptedFiles The `acceptedFiles` prop currently set for the component\n   * @param {number} maxFileSize The `maxFileSize` prop currently set for the component\n   */\n  getDropRejectMessage: PropTypes.func,\n\n  /**\n   * Fired when the files inside dropzone change.\n   *\n   * @param {File[]} loadedFiles All the files currently loaded into the dropzone.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Fired when the user drops files into the dropzone.\n   *\n   * @param {File[]} droppedFiles All the files dropped into the dropzone.\n   */\n  onDrop: PropTypes.func,\n\n  /**\n   * Fired when a file is rejected because of wrong file type, size or goes beyond the filesLimit.\n   *\n   * @param {File[]} rejectedFiles All the rejected files.\n   */\n  onDropRejected: PropTypes.func,\n\n  /**\n   * Fired when a file is deleted from the previews panel.\n   *\n   * @param {File} deletedFile The file that was removed.\n   */\n  onDelete: PropTypes.func\n} : void 0;\nvar DropzoneArea$1 = withStyles(styles$2)(DropzoneArea);\n\nfunction splitDropzoneDialogProps(allProps) {\n  var cancelButtonText = allProps.cancelButtonText,\n      dialogProps = allProps.dialogProps,\n      dialogTitle = allProps.dialogTitle,\n      fullWidth = allProps.fullWidth,\n      maxWidth = allProps.maxWidth,\n      onClose = allProps.onClose,\n      onSave = allProps.onSave,\n      open = allProps.open,\n      submitButtonText = allProps.submitButtonText,\n      dropzoneAreaProps = _objectWithoutProperties(allProps, [\"cancelButtonText\", \"dialogProps\", \"dialogTitle\", \"fullWidth\", \"maxWidth\", \"onClose\", \"onSave\", \"open\", \"submitButtonText\"]);\n\n  return [{\n    cancelButtonText: cancelButtonText,\n    dialogProps: dialogProps,\n    dialogTitle: dialogTitle,\n    fullWidth: fullWidth,\n    maxWidth: maxWidth,\n    onClose: onClose,\n    onSave: onSave,\n    open: open,\n    submitButtonText: submitButtonText\n  }, dropzoneAreaProps];\n}\n/**\n * This component provides the DropzoneArea inside of a Material-UI Dialog.\n *\n * It supports all the Props and Methods from `DropzoneArea`.\n */\n\n\nvar DropzoneDialog = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(DropzoneDialog, _React$PureComponent);\n\n  function DropzoneDialog() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, DropzoneDialog);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(DropzoneDialog)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      files: []\n    };\n\n    _this.handleClose = function (event) {\n      var onClose = _this.props.onClose; // Notify onClose\n\n      if (onClose) {\n        onClose(event);\n      }\n    };\n\n    _this.handleChange = function (files) {\n      var onChange = _this.props.onChange;\n\n      _this.setState({\n        files: files\n      });\n\n      if (onChange) {\n        onChange(files);\n      }\n    };\n\n    _this.handleSaveClick = function () {\n      var onSave = _this.props.onSave;\n      var files = _this.state.files;\n\n      if (onSave) {\n        onSave(files);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(DropzoneDialog, [{\n    key: \"render\",\n    value: function render() {\n      var _splitDropzoneDialogP = splitDropzoneDialogProps(this.props),\n          _splitDropzoneDialogP2 = _slicedToArray(_splitDropzoneDialogP, 2),\n          dropzoneDialogProps = _splitDropzoneDialogP2[0],\n          dropzoneAreaProps = _splitDropzoneDialogP2[1];\n\n      var cancelButtonText = dropzoneDialogProps.cancelButtonText,\n          dialogProps = dropzoneDialogProps.dialogProps,\n          dialogTitle = dropzoneDialogProps.dialogTitle,\n          fullWidth = dropzoneDialogProps.fullWidth,\n          maxWidth = dropzoneDialogProps.maxWidth,\n          open = dropzoneDialogProps.open,\n          submitButtonText = dropzoneDialogProps.submitButtonText;\n      var files = this.state.files; // Submit button state\n\n      var submitDisabled = files.length === 0;\n      return createElement(Fragment, null, createElement(Dialog, _extends({}, dialogProps, {\n        fullWidth: fullWidth,\n        maxWidth: maxWidth,\n        onClose: this.handleClose,\n        open: open\n      }), createElement(DialogTitle, null, dialogTitle), createElement(DialogContent, null, createElement(DropzoneArea$1, _extends({}, dropzoneAreaProps, {\n        onChange: this.handleChange\n      }))), createElement(DialogActions, null, createElement(Button, {\n        color: \"primary\",\n        onClick: this.handleClose\n      }, cancelButtonText), createElement(Button, {\n        color: \"primary\",\n        disabled: submitDisabled,\n        onClick: this.handleSaveClick\n      }, submitButtonText))));\n    }\n  }]);\n\n  return DropzoneDialog;\n}(PureComponent);\n\nDropzoneDialog.defaultProps = _extends({}, DropzoneArea$1.defaultProps, {\n  open: false,\n  dialogTitle: 'Upload file',\n  dialogProps: {},\n  fullWidth: true,\n  maxWidth: 'sm',\n  cancelButtonText: 'Cancel',\n  submitButtonText: 'Submit',\n  showPreviews: true,\n  showPreviewsInDropzone: false,\n  showFileNamesInPreview: true\n});\nprocess.env.NODE_ENV !== \"production\" ? DropzoneDialog.propTypes = _extends({}, DropzoneArea$1.propTypes, {\n  /** Sets whether the dialog is open or closed. */\n  open: PropTypes.bool,\n\n  /** The Dialog title. */\n  dialogTitle: PropTypes.string,\n\n  /**\n   * Props to pass to the Material-UI Dialog components.\n   * @see See [Material-UI Dialog](https://material-ui.com/api/dialog/#props) for available values.\n   */\n  dialogProps: PropTypes.object,\n\n  /**\n   * If `true`, the dialog stretches to `maxWidth`.<br/>\n   * Notice that the dialog width grow is limited by the default margin.\n   */\n  fullWidth: PropTypes.bool,\n\n  /**\n   * Determine the max-width of the dialog. The dialog width grows with the size of the screen.<br/>\n   * Set to `false` to disable `maxWidth`.\n   */\n  maxWidth: PropTypes.string,\n\n  /** Cancel button text in dialog. */\n  cancelButtonText: PropTypes.string,\n\n  /** Submit button text in dialog. */\n  submitButtonText: PropTypes.string,\n\n  /**\n   * Fired when the modal is closed\n   *\n   * @param {SyntheticEvent} event The react `SyntheticEvent`\n   */\n  onClose: PropTypes.func,\n\n  /**\n   * Fired when the user clicks the Submit button.\n   *\n   * @param {File[]} files All the files currently inside the Dropzone.\n   */\n  onSave: PropTypes.func,\n\n  /**\n   * Shows previews **BELOW** the dropzone.<br/>\n   * **Note:** By default previews show up under in the Dialog and inside in the standalone.\n   */\n  showPreviews: PropTypes.bool,\n\n  /** Shows preview **INSIDE** the dropzone area. */\n  showPreviewsInDropzone: PropTypes.bool,\n\n  /** Shows file name under the image. */\n  showFileNamesInPreview: PropTypes.bool\n}) : void 0;\nexport { DropzoneArea$1 as DropzoneArea, DropzoneDialog };","map":{"version":3,"sources":["../src/helpers.js","../src/components/PreviewList.js","../src/components/SnackbarContentWrapper.js","../src/components/DropzoneArea.js","../src/components/DropzoneDialog.js"],"names":["file","size","filesize","response","fetch","data","metadata","type","filename","url","ext","fullFilename","reader","resolve","event","reject","styles","removeBtn","transition","position","opacity","top","right","width","height","smallPreviewImg","maxWidth","marginTop","marginRight","color","boxSizing","boxShadow","borderRadius","zIndex","imageContainer","textAlign","fileObjects","handleRemove","showFileNames","useChipsForPreview","previewChipProps","previewGridClasses","previewGridProps","classes","i","fileObject","container","img","clsx","React.createElement","PropTypes","bool","withStyles","variantIcon","success","warning","error","info","InfoIcon","backgroundColor","green","theme","dark","amber","icon","fontSize","iconVariant","message","display","alignItems","className","onClose","variant","other","props","Icon","isRequired","backgroundPosition","dropZone","minHeight","border","borderColor","cursor","stripes","backgroundImage","animation","backgroundSize","rejectStripes","dropzoneTextStyle","uploadIconSize","dropzoneParagraph","marginBottom","defaultSnackbarAnchorOrigin","horizontal","vertical","DropzoneArea","React","state","openSnackBar","snackbarMessage","snackbarVariant","clearOnUnmount","onChange","filesArray","fileObjs","createFileFromUrl","readFile","console","handleDropAccepted","filesLimit","getFileAddedMessage","getFileLimitExceedMessage","onDrop","acceptedFiles","msg","fileObj","handleDropRejected","getDropRejectMessage","maxFileSize","onDropRejected","rejectedFiles","getFileRemovedMessage","onDelete","removedFileObj","remainingFileObjs","handleCloseSnackbar","alertSnackbarProps","disableRejectionFeedback","dropzoneClass","dropzoneParagraphClass","dropzoneProps","dropzoneText","inputProps","previewText","showAlerts","showFileNamesInPreview","showPreviews","showPreviewsInDropzone","acceptFiles","isMultiple","previewsVisible","previewsInDropzoneVisible","getRootProps","getInputProps","isDragActive","isDragReject","anchorOrigin","autoHideDuration","initialFiles","rejectedFile","convertBytesToMbsOrKbs","func","cancelButtonText","dialogProps","dialogTitle","fullWidth","onSave","open","submitButtonText","dropzoneAreaProps","allProps","DropzoneDialog","files","handleClose","handleChange","handleSaveClick","dropzoneDialogProps","splitDropzoneDialogProps","submitDisabled"],"mappings":"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","sourcesContent":["export function isImage(file) {\n    if (file.type.split('/')[0] === 'image') {\n        return true;\n    }\n}\n\nexport function convertBytesToMbsOrKbs(filesize) {\n    let size = '';\n    // I know, not technically correct...\n    if (filesize >= 1000000) {\n        size = (filesize / 1000000) + ' megabytes';\n    } else if (filesize >= 1000) {\n        size = (filesize / 1000) + ' kilobytes';\n    } else {\n        size = filesize + ' bytes';\n    }\n    return size;\n}\n\nexport async function createFileFromUrl(url) {\n    const response = await fetch(url);\n    const data = await response.blob();\n    const metadata = {type: data.type};\n    const filename = url.replace(/\\?.+/, '').split('/').pop();\n    const ext = data.type.split('/').pop();\n    // Append extension only if not already present\n    const fullFilename = !filename?.endsWith(ext) ? `${filename}.${ext}` : filename;\n    return new File([data], fullFilename, metadata);\n}\n\nexport function readFile(file) {\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n            resolve(event?.target?.result);\n        };\n        reader.onerror = (event) => {\n            reader.abort();\n            reject(event);\n        };\n        reader.readAsDataURL(file);\n    });\n}\n","import Chip from '@material-ui/core/Chip';\nimport Fab from '@material-ui/core/Fab';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core/styles';\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {isImage} from '../helpers';\n\nconst styles = {\n    removeBtn: {\n        transition: '.5s ease',\n        position: 'absolute',\n        opacity: 0,\n        top: -5,\n        right: -5,\n        width: 40,\n        height: 40,\n    },\n    smallPreviewImg: {\n        height: 100,\n        width: 'initial',\n        maxWidth: '100%',\n        marginTop: 5,\n        marginRight: 10,\n        color: 'rgba(0, 0, 0, 0.87)',\n        transition: 'all 450ms cubic-bezier(0.23, 1, 0.32, 1) 0ms',\n        boxSizing: 'border-box',\n        boxShadow: 'rgba(0, 0, 0, 0.12) 0 1px 6px, rgba(0, 0, 0, 0.12) 0 1px 4px',\n        borderRadius: 2,\n        zIndex: 5,\n        opacity: 1,\n    },\n    imageContainer: {\n        position: 'relative',\n        zIndex: 10,\n        textAlign: 'center',\n        '&:hover $smallPreviewImg': {\n            opacity: 0.3,\n        },\n        '&:hover $removeBtn': {\n            opacity: 1,\n        },\n    },\n};\n\nfunction PreviewList({\n    fileObjects,\n    handleRemove,\n    showFileNames,\n    useChipsForPreview,\n    previewChipProps,\n    previewGridClasses,\n    previewGridProps,\n    classes,\n}) {\n    if (useChipsForPreview) {\n        return (\n            fileObjects.map((fileObject, i) => (\n                <div key={i}>\n                    <Chip\n                        label={fileObject.file.name}\n                        onDelete={handleRemove(i)}\n                        variant=\"outlined\"\n                        {...previewChipProps}\n                    />\n                </div>\n            ))\n        );\n    }\n\n    return (\n        <Grid container={true} spacing={8} className={previewGridClasses.container} {...previewGridProps.container}>\n            {fileObjects.map((fileObject, i) => {\n                const img = (isImage(fileObject.file) ?\n                    <img className={classes.smallPreviewImg} role=\"presentation\" src={fileObject.data} /> :\n                    <AttachFileIcon className={classes.smallPreviewImg} />\n                );\n\n                return (\n                    <Grid\n                        key={i}\n                        item={true}\n                        xs={4}\n                        {...previewGridProps.item}\n                        className={clsx(previewGridClasses.item, classes.imageContainer)}\n                    >\n                        {img}\n\n                        {showFileNames && (\n                            <Typography variant=\"body1\" component=\"p\">\n                                {fileObject.file.name}\n                            </Typography>\n                        )}\n\n                        <Fab\n                            onClick={handleRemove(i)}\n                            aria-label=\"Delete\"\n                            className={classes.removeBtn}\n                        >\n                            <DeleteIcon />\n                        </Fab>\n                    </Grid>\n                );\n            })}\n        </Grid>\n    );\n}\n\nPreviewList.propTypes = {\n    classes: PropTypes.object.isRequired,\n    fileObjects: PropTypes.arrayOf(PropTypes.object).isRequired,\n    handleRemove: PropTypes.func.isRequired,\n    previewChipProps: PropTypes.object,\n    previewGridClasses: PropTypes.object,\n    previewGridProps: PropTypes.object,\n    showFileNames: PropTypes.bool,\n    useChipsForPreview: PropTypes.bool,\n};\n\nexport default withStyles(styles)(PreviewList);\n","import green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport {withStyles} from '@material-ui/core/styles';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst styles = (theme) => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.dark,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n});\n\nfunction SnackbarContentWrapper(props) {\n    const {classes, className, message, onClose, variant, ...other} = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    className={classes.close}\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nSnackbarContentWrapper.propTypes = {\n    classes: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nexport default withStyles(styles)(SnackbarContentWrapper);\n","import Snackbar from '@material-ui/core/Snackbar';\nimport Typography from '@material-ui/core/Typography';\nimport {withStyles} from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {Fragment} from 'react';\nimport Dropzone from 'react-dropzone';\n\nimport {convertBytesToMbsOrKbs, createFileFromUrl, readFile} from '../helpers';\n\nimport PreviewList from './PreviewList';\nimport SnackbarContentWrapper from './SnackbarContentWrapper';\n\nconst styles = {\n    '@keyframes progress': {\n        '0%': {\n            backgroundPosition: '0 0',\n        },\n        '100%': {\n            backgroundPosition: '-70px 0',\n        },\n    },\n    dropZone: {\n        position: 'relative',\n        width: '100%',\n        minHeight: '250px',\n        backgroundColor: '#F0F0F0',\n        border: 'dashed',\n        borderColor: '#C8C8C8',\n        cursor: 'pointer',\n        boxSizing: 'border-box',\n    },\n    stripes: {\n        border: 'solid',\n        backgroundImage: 'repeating-linear-gradient(-45deg, #F0F0F0, #F0F0F0 25px, #C8C8C8 25px, #C8C8C8 50px)',\n        animation: 'progress 2s linear infinite !important',\n        backgroundSize: '150% 100%',\n    },\n    rejectStripes: {\n        backgroundImage: 'repeating-linear-gradient(-45deg, #fc8785, #fc8785 25px, #f4231f 25px, #f4231f 50px)',\n    },\n    dropzoneTextStyle: {\n        textAlign: 'center',\n    },\n    uploadIconSize: {\n        width: 51,\n        height: 51,\n        color: '#909090',\n    },\n    dropzoneParagraph: {\n        marginBottom: 20,\n        marginTop: 20,\n    },\n};\n\nconst defaultSnackbarAnchorOrigin = {\n    horizontal: 'left',\n    vertical: 'bottom',\n};\n\n/**\n * This components creates a Material-UI Dropzone, with previews and snackbar notifications.\n */\nclass DropzoneArea extends React.PureComponent {\n    state = {\n        fileObjects: [],\n        openSnackBar: false,\n        snackbarMessage: '',\n        snackbarVariant: 'success',\n    };\n\n    componentDidMount() {\n        this.filesArray(this.props.initialFiles);\n    }\n\n    componentWillUnmount() {\n        const {clearOnUnmount, onChange} = this.props;\n\n        if (clearOnUnmount) {\n            this.setState({\n                fileObjects: [],\n            });\n\n            if (onChange) {\n                onChange([]);\n            }\n        }\n    }\n\n    filesArray = async(urls) => {\n        try {\n            const fileObjs = await Promise.all(\n                urls.map(async(url) => {\n                    const file = await createFileFromUrl(url);\n                    const data = await readFile(file);\n\n                    return {\n                        file,\n                        data,\n                    };\n                })\n            );\n\n            this.setState((state) => ({\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    fileObjs\n                ),\n            }),\n            () => {\n                const {onChange} = this.props;\n                const {fileObjects} = this.state;\n\n                if (onChange) {\n                    onChange(fileObjects.map((fileObject) => fileObject.file));\n                }\n            });\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    handleDropAccepted = async(acceptedFiles, evt) => {\n        const {filesLimit, getFileAddedMessage, getFileLimitExceedMessage, onDrop} = this.props;\n        const {fileObjects} = this.state;\n\n        if (filesLimit > 1 && fileObjects.length + acceptedFiles.length > filesLimit) {\n            this.setState({\n                openSnackBar: true,\n                snackbarMessage: getFileLimitExceedMessage(filesLimit),\n                snackbarVariant: 'error',\n            });\n            return;\n        }\n\n        // Notify Drop event\n        if (onDrop) {\n            onDrop(acceptedFiles, evt);\n        }\n\n        // Retrieve fileObjects data\n        const fileObjs = await Promise.all(\n            acceptedFiles.map(async(file) => {\n                const data = await readFile(file);\n                return {\n                    file,\n                    data,\n                };\n            })\n        );\n\n        // Display message\n        const message = fileObjs.reduce((msg, fileObj) => msg + getFileAddedMessage(fileObj.file.name), '');\n        this.setState({\n            openSnackBar: true,\n            snackbarMessage: message,\n            snackbarVariant: 'success',\n        });\n\n        // Update component state\n        this.setState((state) => {\n            // Handle a single file\n            if (filesLimit <= 1) {\n                return {\n                    fileObjects: [].concat(fileObjs[0]),\n                };\n            }\n\n            // Handle multiple files\n            return {\n                fileObjects: [].concat(\n                    state.fileObjects,\n                    fileObjs\n                ),\n            };\n        },\n        () => {\n            const {onChange} = this.props;\n            const {fileObjects} = this.state;\n\n            if (onChange) {\n                onChange(fileObjects.map((fileObject) => fileObject.file));\n            }\n        });\n    }\n\n    handleDropRejected = (rejectedFiles, evt) => {\n        const {acceptedFiles, getDropRejectMessage, maxFileSize, onDropRejected} = this.props;\n\n        let message = '';\n        rejectedFiles.forEach((rejectedFile) => {\n            message = getDropRejectMessage(rejectedFile, acceptedFiles, maxFileSize);\n        });\n\n        if (onDropRejected) {\n            onDropRejected(rejectedFiles, evt);\n        }\n\n        this.setState({\n            openSnackBar: true,\n            snackbarMessage: message,\n            snackbarVariant: 'error',\n        });\n    }\n\n    handleRemove = (fileIndex) => (event) => {\n        event.stopPropagation();\n\n        const {getFileRemovedMessage, onChange, onDelete} = this.props;\n        const {fileObjects} = this.state;\n\n        // Find removed fileObject\n        const removedFileObj = fileObjects.filter((fileObject, i) => {\n            return i === fileIndex;\n        })[0];\n        // Calculate remaining fileObjects array\n        const remainingFileObjs = fileObjects.filter((fileObject, i) => {\n            return i !== fileIndex;\n        });\n\n        this.setState({fileObjects: remainingFileObjs}, () => {\n            if (onDelete) {\n                onDelete(removedFileObj.file);\n            }\n\n            if (onChange) {\n                onChange(this.state.fileObjects.map((fileObject) => fileObject.file));\n            }\n\n            this.setState({\n                openSnackBar: true,\n                snackbarMessage: getFileRemovedMessage(removedFileObj.file.name),\n                snackbarVariant: 'info',\n            });\n        });\n    };\n\n    handleCloseSnackbar = () => {\n        this.setState({\n            openSnackBar: false,\n        });\n    };\n\n    render() {\n        const {\n            acceptedFiles,\n            alertSnackbarProps,\n            classes,\n            disableRejectionFeedback,\n            dropzoneClass,\n            dropzoneParagraphClass,\n            dropzoneProps,\n            dropzoneText,\n            filesLimit,\n            inputProps,\n            maxFileSize,\n            previewChipProps,\n            previewGridClasses,\n            previewGridProps,\n            previewText,\n            showAlerts,\n            showFileNames,\n            showFileNamesInPreview,\n            showPreviews,\n            showPreviewsInDropzone,\n            useChipsForPreview,\n        } = this.props;\n        const {fileObjects, openSnackBar, snackbarMessage, snackbarVariant} = this.state;\n\n        const acceptFiles = acceptedFiles?.join(',');\n        const isMultiple = filesLimit > 1;\n        const previewsVisible = showPreviews && fileObjects.length > 0;\n        const previewsInDropzoneVisible = showPreviewsInDropzone && fileObjects.length > 0;\n\n        return (\n            <Fragment>\n                <Dropzone\n                    {...dropzoneProps}\n                    accept={acceptFiles}\n                    onDropAccepted={this.handleDropAccepted}\n                    onDropRejected={this.handleDropRejected}\n                    maxSize={maxFileSize}\n                    multiple={isMultiple}\n                >\n                    {({getRootProps, getInputProps, isDragActive, isDragReject}) => (\n                        <div\n                            {...getRootProps()}\n                            className={clsx(\n                                classes.dropZone,\n                                dropzoneClass,\n                                isDragActive && classes.stripes,\n                                (!disableRejectionFeedback && isDragReject) && classes.rejectStripes,\n                            )}\n                        >\n                            <input {...inputProps} {...getInputProps()} />\n\n                            <div className={classes.dropzoneTextStyle}>\n                                <Typography\n                                    variant=\"h5\"\n                                    component=\"p\"\n                                    className={clsx(classes.dropzoneParagraph, dropzoneParagraphClass)}\n                                >\n                                    {dropzoneText}\n                                </Typography>\n                                <CloudUploadIcon className={classes.uploadIconSize} />\n                            </div>\n\n                            {previewsInDropzoneVisible &&\n                                <PreviewList\n                                    fileObjects={fileObjects}\n                                    handleRemove={this.handleRemove}\n                                    showFileNames={showFileNames}\n                                    useChipsForPreview={useChipsForPreview}\n                                    previewChipProps={previewChipProps}\n                                    previewGridClasses={previewGridClasses}\n                                    previewGridProps={previewGridProps}\n                                />\n                            }\n                        </div>\n                    )}\n                </Dropzone>\n\n                {previewsVisible &&\n                    <Fragment>\n                        <Typography variant=\"subtitle1\" component=\"span\">\n                            {previewText}\n                        </Typography>\n\n                        <PreviewList\n                            fileObjects={fileObjects}\n                            handleRemove={this.handleRemove}\n                            showFileNames={showFileNamesInPreview}\n                            useChipsForPreview={useChipsForPreview}\n                            previewChipProps={previewChipProps}\n                            previewGridClasses={previewGridClasses}\n                            previewGridProps={previewGridProps}\n                        />\n                    </Fragment>\n                }\n\n                {showAlerts &&\n                    <Snackbar\n                        anchorOrigin={defaultSnackbarAnchorOrigin}\n                        autoHideDuration={6000}\n                        {...alertSnackbarProps}\n                        open={openSnackBar}\n                        onClose={this.handleCloseSnackbar}\n                    >\n                        <SnackbarContentWrapper\n                            onClose={this.handleCloseSnackbar}\n                            variant={snackbarVariant}\n                            message={snackbarMessage}\n                        />\n                    </Snackbar>\n                }\n            </Fragment>\n        );\n    }\n}\n\nDropzoneArea.defaultProps = {\n    acceptedFiles: ['image/*', 'video/*', 'application/*'],\n    filesLimit: 3,\n    maxFileSize: 3000000,\n    dropzoneText: 'Drag and drop a file here or click',\n    previewText: 'Preview:',\n    disableRejectionFeedback: false,\n    showPreviews: false, // By default previews show up under in the dialog and inside in the standalone\n    showPreviewsInDropzone: true,\n    showFileNames: false,\n    showFileNamesInPreview: false,\n    useChipsForPreview: false,\n    previewChipProps: {},\n    previewGridClasses: {},\n    previewGridProps: {},\n    showAlerts: true,\n    alertSnackbarProps: {\n        anchorOrigin: {\n            horizontal: 'left',\n            vertical: 'bottom',\n        },\n        autoHideDuration: 6000,\n    },\n    clearOnUnmount: true,\n    initialFiles: [],\n    getFileLimitExceedMessage: (filesLimit) => (`Maximum allowed number of files exceeded. Only ${filesLimit} allowed`),\n    getFileAddedMessage: (fileName) => (`File ${fileName} successfully added.`),\n    getFileRemovedMessage: (fileName) => (`File ${fileName} removed.`),\n    getDropRejectMessage: (rejectedFile, acceptedFiles, maxFileSize) => {\n        let message = `File ${rejectedFile.name} was rejected. `;\n        if (!acceptedFiles.includes(rejectedFile.type)) {\n            message += 'File type not supported. ';\n        }\n        if (rejectedFile.size > maxFileSize) {\n            message += 'File is too big. Size limit is ' + convertBytesToMbsOrKbs(maxFileSize) + '. ';\n        }\n        return message;\n    },\n};\n\nDropzoneArea.propTypes = {\n    /** @ignore */\n    classes: PropTypes.object.isRequired,\n    /** A list of file types to accept.\n     * @see See [here](https://react-dropzone.js.org/#section-accepting-specific-file-types) for more details.\n     */\n    acceptedFiles: PropTypes.arrayOf(PropTypes.string),\n    /** Maximum number of files that can be loaded into the dropzone. */\n    filesLimit: PropTypes.number,\n    /** Maximum file size (in bytes) that the dropzone will accept. */\n    maxFileSize: PropTypes.number,\n    /** Text inside the dropzone. */\n    dropzoneText: PropTypes.string,\n    /** Custom CSS class name for dropzone container. */\n    dropzoneClass: PropTypes.string,\n    /** Custom CSS class name for text inside the container. */\n    dropzoneParagraphClass: PropTypes.string,\n    /** Disable feedback effect when dropping rejected files. */\n    disableRejectionFeedback: PropTypes.bool,\n    /** Shows previews **BELOW** the dropzone. */\n    showPreviews: PropTypes.bool,\n    /** Shows preview **INSIDE** the dropzone area. */\n    showPreviewsInDropzone: PropTypes.bool,\n    /** Shows file name under the dropzone image. */\n    showFileNames: PropTypes.bool,\n    /** Shows file name under the image. */\n    showFileNamesInPreview: PropTypes.bool,\n    /** Uses deletable Material-UI Chip components to display file names. */\n    useChipsForPreview: PropTypes.bool,\n    /**\n     * Props to pass to the Material-UI Chip components.<br/>Requires `useChipsForPreview` prop to be `true`.\n     *\n     * @see See [Material-UI Chip](https://material-ui.com/api/chip/#props) for available values.\n     */\n    previewChipProps: PropTypes.object,\n    /**\n     * Custom CSS classNames for preview Grid components.<br/>\n     * Should be in the form {container: string, item: string, image: string}.\n     */\n    previewGridClasses: PropTypes.object,\n    /**\n     * Props to pass to the Material-UI Grid components.<br/>\n     * Should be in the form {container: GridProps, item: GridProps}.\n     *\n     * @see See [Material-UI Grid](https://material-ui.com/api/grid/#props) for available GridProps values.\n     */\n    previewGridProps: PropTypes.object,\n    /** The label for the file preview section. */\n    previewText: PropTypes.string,\n    /** Shows styled Material-UI Snackbar when files are dropped, deleted or rejected. */\n    showAlerts: PropTypes.bool,\n    /**\n     * Props to pass to the Material-UI Snackbar components.<br/>Requires `showAlerts` prop to be `true`.\n     *\n     * @see See [Material-UI Snackbar](https://material-ui.com/api/snackbar/#props) for available values.\n     */\n    alertSnackbarProps: PropTypes.object,\n    /**\n     * Props to pass to the Dropzone component.\n     *\n     * @see See [Dropzone props](https://react-dropzone.js.org/#src) for available values.\n     */\n    dropzoneProps: PropTypes.object,\n    /**\n     * Attributes applied to the input element.\n     *\n     * @see See [MDN Input File attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Additional_attributes) for available values.\n     */\n    inputProps: PropTypes.object,\n    /** Clear uploaded files when component is unmounted. */\n    clearOnUnmount: PropTypes.bool,\n    /** List of URLs of already uploaded images.<br/>**Note:** Please take care of CORS. */\n    initialFiles: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * Get alert message to display when files limit is exceed.\n     *\n     * *Default*: \"Maximum allowed number of files exceeded. Only ${filesLimit} allowed\"\n     *\n     * @param {number} filesLimit The `filesLimit` currently set for the component.\n     */\n    getFileLimitExceedMessage: PropTypes.func,\n    /**\n     * Get alert message to display when a new file is added.\n     *\n     * *Default*: \"File ${fileName} successfully added.\"\n     *\n     * @param {string} fileName The newly added file name.\n     */\n    getFileAddedMessage: PropTypes.func,\n    /**\n     * Get alert message to display when a file is removed.\n     *\n     * *Default*: \"File ${fileName} removed.\"\n     *\n     * @param {string} fileName The name of the removed file.\n     */\n    getFileRemovedMessage: PropTypes.func,\n    /**\n     * Get alert message to display when a file is rejected onDrop.\n     *\n     * *Default*: \"File ${rejectedFile.name} was rejected.\"\n     *\n     * @param {Object} rejectedFile The file that got rejected\n     * @param {string[]} acceptedFiles The `acceptedFiles` prop currently set for the component\n     * @param {number} maxFileSize The `maxFileSize` prop currently set for the component\n     */\n    getDropRejectMessage: PropTypes.func,\n    /**\n     * Fired when the files inside dropzone change.\n     *\n     * @param {File[]} loadedFiles All the files currently loaded into the dropzone.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Fired when the user drops files into the dropzone.\n     *\n     * @param {File[]} droppedFiles All the files dropped into the dropzone.\n     */\n    onDrop: PropTypes.func,\n    /**\n     * Fired when a file is rejected because of wrong file type, size or goes beyond the filesLimit.\n     *\n     * @param {File[]} rejectedFiles All the rejected files.\n     */\n    onDropRejected: PropTypes.func,\n    /**\n     * Fired when a file is deleted from the previews panel.\n     *\n     * @param {File} deletedFile The file that was removed.\n     */\n    onDelete: PropTypes.func,\n};\n\nexport default withStyles(styles)(DropzoneArea);\n","import Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport {Fragment} from 'react';\n\nimport DropzoneArea from './DropzoneArea';\n\n// Split props related to DropzoneDialog from DropzoneArea ones\nfunction splitDropzoneDialogProps(allProps) {\n    const {\n        cancelButtonText,\n        dialogProps,\n        dialogTitle,\n        fullWidth,\n        maxWidth,\n        onClose,\n        onSave,\n        open,\n        submitButtonText,\n        ...dropzoneAreaProps\n    } = allProps;\n\n    return [\n        {\n            cancelButtonText,\n            dialogProps,\n            dialogTitle,\n            fullWidth,\n            maxWidth,\n            onClose,\n            onSave,\n            open,\n            submitButtonText,\n        },\n        dropzoneAreaProps,\n    ];\n}\n\n/**\n * This component provides the DropzoneArea inside of a Material-UI Dialog.\n *\n * It supports all the Props and Methods from `DropzoneArea`.\n */\nclass DropzoneDialog extends React.PureComponent {\n    state = {\n        files: [],\n    };\n\n    handleClose = (event) => {\n        const {onClose} = this.props;\n        // Notify onClose\n        if (onClose) {\n            onClose(event);\n        }\n    }\n\n    handleChange = (files) => {\n        const {onChange} = this.props;\n\n        this.setState({\n            files,\n        });\n\n        if (onChange) {\n            onChange(files);\n        }\n    }\n\n    handleSaveClick = () => {\n        const {onSave} = this.props;\n        const {files} = this.state;\n\n        if (onSave) {\n            onSave(files);\n        }\n    }\n\n    render() {\n        const [dropzoneDialogProps, dropzoneAreaProps] = splitDropzoneDialogProps(this.props);\n        const {\n            cancelButtonText,\n            dialogProps,\n            dialogTitle,\n            fullWidth,\n            maxWidth,\n            open,\n            submitButtonText,\n        } = dropzoneDialogProps;\n        const {files} = this.state;\n\n        // Submit button state\n        const submitDisabled = files.length === 0;\n\n        return (\n            <Fragment>\n                <Dialog\n                    {...dialogProps}\n                    fullWidth={fullWidth}\n                    maxWidth={maxWidth}\n                    onClose={this.handleClose}\n                    open={open}\n                >\n                    <DialogTitle>{dialogTitle}</DialogTitle>\n\n                    <DialogContent>\n                        <DropzoneArea\n                            {...dropzoneAreaProps}\n                            onChange={this.handleChange}\n                        />\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Button\n                            color=\"primary\"\n                            onClick={this.handleClose}\n                        >\n                            {cancelButtonText}\n                        </Button>\n\n                        <Button\n                            color=\"primary\"\n                            disabled={submitDisabled}\n                            onClick={this.handleSaveClick}\n                        >\n                            {submitButtonText}\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Fragment>\n        );\n    }\n}\n\nDropzoneDialog.defaultProps = {\n    ...DropzoneArea.defaultProps,\n    open: false,\n    dialogTitle: 'Upload file',\n    dialogProps: {},\n    fullWidth: true,\n    maxWidth: 'sm',\n    cancelButtonText: 'Cancel',\n    submitButtonText: 'Submit',\n    showPreviews: true,\n    showPreviewsInDropzone: false,\n    showFileNamesInPreview: true,\n};\n\nDropzoneDialog.propTypes = {\n    ...DropzoneArea.propTypes,\n    /** Sets whether the dialog is open or closed. */\n    open: PropTypes.bool,\n    /** The Dialog title. */\n    dialogTitle: PropTypes.string,\n    /**\n     * Props to pass to the Material-UI Dialog components.\n     * @see See [Material-UI Dialog](https://material-ui.com/api/dialog/#props) for available values.\n     */\n    dialogProps: PropTypes.object,\n    /**\n     * If `true`, the dialog stretches to `maxWidth`.<br/>\n     * Notice that the dialog width grow is limited by the default margin.\n     */\n    fullWidth: PropTypes.bool,\n    /**\n     * Determine the max-width of the dialog. The dialog width grows with the size of the screen.<br/>\n     * Set to `false` to disable `maxWidth`.\n     */\n    maxWidth: PropTypes.string,\n    /** Cancel button text in dialog. */\n    cancelButtonText: PropTypes.string,\n    /** Submit button text in dialog. */\n    submitButtonText: PropTypes.string,\n    /**\n     * Fired when the modal is closed\n     *\n     * @param {SyntheticEvent} event The react `SyntheticEvent`\n     */\n    onClose: PropTypes.func,\n    /**\n     * Fired when the user clicks the Submit button.\n     *\n     * @param {File[]} files All the files currently inside the Dropzone.\n     */\n    onSave: PropTypes.func,\n    /**\n     * Shows previews **BELOW** the dropzone.<br/>\n     * **Note:** By default previews show up under in the Dialog and inside in the standalone.\n     */\n    showPreviews: PropTypes.bool,\n    /** Shows preview **INSIDE** the dropzone area. */\n    showPreviewsInDropzone: PropTypes.bool,\n    /** Shows file name under the image. */\n    showFileNamesInPreview: PropTypes.bool,\n};\n\nexport default DropzoneDialog;\n"]},"metadata":{},"sourceType":"module"}